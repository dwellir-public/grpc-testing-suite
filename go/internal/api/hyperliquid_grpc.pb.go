// Version 1

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: hyperliquid.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HyperLiquidL1Gateway_GetOrderBookSnapshot_FullMethodName     = "/hyperliquid_l1_gateway.v1.HyperLiquidL1Gateway/GetOrderBookSnapshot"
	HyperLiquidL1Gateway_StreamBlocks_FullMethodName             = "/hyperliquid_l1_gateway.v1.HyperLiquidL1Gateway/StreamBlocks"
	HyperLiquidL1Gateway_StreamOrderBookSnapshots_FullMethodName = "/hyperliquid_l1_gateway.v1.HyperLiquidL1Gateway/StreamOrderBookSnapshots"
	HyperLiquidL1Gateway_StreamBlockFills_FullMethodName         = "/hyperliquid_l1_gateway.v1.HyperLiquidL1Gateway/StreamBlockFills"
)

// HyperLiquidL1GatewayClient is the client API for HyperLiquidL1Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperLiquidL1GatewayClient interface {
	// Get single OrderBookSnapshot at timestamp
	GetOrderBookSnapshot(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*OrderBookSnapshot, error)
	// Stream Blocks starting from timestamp
	StreamBlocks(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
	// Stream OrderBookSnapshots starting from timestamp
	StreamOrderBookSnapshots(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBookSnapshot], error)
	// Stream BlockFills starting from timestamp
	StreamBlockFills(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockFills], error)
}

type hyperLiquidL1GatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperLiquidL1GatewayClient(cc grpc.ClientConnInterface) HyperLiquidL1GatewayClient {
	return &hyperLiquidL1GatewayClient{cc}
}

func (c *hyperLiquidL1GatewayClient) GetOrderBookSnapshot(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*OrderBookSnapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBookSnapshot)
	err := c.cc.Invoke(ctx, HyperLiquidL1Gateway_GetOrderBookSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLiquidL1GatewayClient) StreamBlocks(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HyperLiquidL1Gateway_ServiceDesc.Streams[0], HyperLiquidL1Gateway_StreamBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Timestamp, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamBlocksClient = grpc.ServerStreamingClient[Block]

func (c *hyperLiquidL1GatewayClient) StreamOrderBookSnapshots(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBookSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HyperLiquidL1Gateway_ServiceDesc.Streams[1], HyperLiquidL1Gateway_StreamOrderBookSnapshots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Timestamp, OrderBookSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamOrderBookSnapshotsClient = grpc.ServerStreamingClient[OrderBookSnapshot]

func (c *hyperLiquidL1GatewayClient) StreamBlockFills(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockFills], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HyperLiquidL1Gateway_ServiceDesc.Streams[2], HyperLiquidL1Gateway_StreamBlockFills_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Timestamp, BlockFills]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamBlockFillsClient = grpc.ServerStreamingClient[BlockFills]

// HyperLiquidL1GatewayServer is the server API for HyperLiquidL1Gateway service.
// All implementations must embed UnimplementedHyperLiquidL1GatewayServer
// for forward compatibility.
type HyperLiquidL1GatewayServer interface {
	// Get single OrderBookSnapshot at timestamp
	GetOrderBookSnapshot(context.Context, *Timestamp) (*OrderBookSnapshot, error)
	// Stream Blocks starting from timestamp
	StreamBlocks(*Timestamp, grpc.ServerStreamingServer[Block]) error
	// Stream OrderBookSnapshots starting from timestamp
	StreamOrderBookSnapshots(*Timestamp, grpc.ServerStreamingServer[OrderBookSnapshot]) error
	// Stream BlockFills starting from timestamp
	StreamBlockFills(*Timestamp, grpc.ServerStreamingServer[BlockFills]) error
	mustEmbedUnimplementedHyperLiquidL1GatewayServer()
}

// UnimplementedHyperLiquidL1GatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHyperLiquidL1GatewayServer struct{}

func (UnimplementedHyperLiquidL1GatewayServer) GetOrderBookSnapshot(context.Context, *Timestamp) (*OrderBookSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBookSnapshot not implemented")
}
func (UnimplementedHyperLiquidL1GatewayServer) StreamBlocks(*Timestamp, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedHyperLiquidL1GatewayServer) StreamOrderBookSnapshots(*Timestamp, grpc.ServerStreamingServer[OrderBookSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderBookSnapshots not implemented")
}
func (UnimplementedHyperLiquidL1GatewayServer) StreamBlockFills(*Timestamp, grpc.ServerStreamingServer[BlockFills]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlockFills not implemented")
}
func (UnimplementedHyperLiquidL1GatewayServer) mustEmbedUnimplementedHyperLiquidL1GatewayServer() {}
func (UnimplementedHyperLiquidL1GatewayServer) testEmbeddedByValue()                              {}

// UnsafeHyperLiquidL1GatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperLiquidL1GatewayServer will
// result in compilation errors.
type UnsafeHyperLiquidL1GatewayServer interface {
	mustEmbedUnimplementedHyperLiquidL1GatewayServer()
}

func RegisterHyperLiquidL1GatewayServer(s grpc.ServiceRegistrar, srv HyperLiquidL1GatewayServer) {
	// If the following call pancis, it indicates UnimplementedHyperLiquidL1GatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HyperLiquidL1Gateway_ServiceDesc, srv)
}

func _HyperLiquidL1Gateway_GetOrderBookSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLiquidL1GatewayServer).GetOrderBookSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLiquidL1Gateway_GetOrderBookSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLiquidL1GatewayServer).GetOrderBookSnapshot(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLiquidL1Gateway_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperLiquidL1GatewayServer).StreamBlocks(m, &grpc.GenericServerStream[Timestamp, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamBlocksServer = grpc.ServerStreamingServer[Block]

func _HyperLiquidL1Gateway_StreamOrderBookSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperLiquidL1GatewayServer).StreamOrderBookSnapshots(m, &grpc.GenericServerStream[Timestamp, OrderBookSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamOrderBookSnapshotsServer = grpc.ServerStreamingServer[OrderBookSnapshot]

func _HyperLiquidL1Gateway_StreamBlockFills_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperLiquidL1GatewayServer).StreamBlockFills(m, &grpc.GenericServerStream[Timestamp, BlockFills]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HyperLiquidL1Gateway_StreamBlockFillsServer = grpc.ServerStreamingServer[BlockFills]

// HyperLiquidL1Gateway_ServiceDesc is the grpc.ServiceDesc for HyperLiquidL1Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperLiquidL1Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hyperliquid_l1_gateway.v1.HyperLiquidL1Gateway",
	HandlerType: (*HyperLiquidL1GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderBookSnapshot",
			Handler:    _HyperLiquidL1Gateway_GetOrderBookSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _HyperLiquidL1Gateway_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderBookSnapshots",
			Handler:       _HyperLiquidL1Gateway_StreamOrderBookSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBlockFills",
			Handler:       _HyperLiquidL1Gateway_StreamBlockFills_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hyperliquid.proto",
}
